今天,使用字节输入流InputStream来   实测 , 直接 write(bytes) 就可以在中间不乱码, 但是
这样结尾会多几个乱码字节, 把 byte[12] 改成 byte[1] 就可以解决了. 因为原文本的字节数不一
定是 12 的整数倍, 写到最后的时候就会有上次读取到 bytes 的内容写入实测 , 直接 writ
e(bytes) 就可以在中间不乱码, 但是这样结尾会多几个乱码字节, 把 byte[12] 改成 byte[1]
 就可以解决了. 因为原文本的字节数不一定是 12 的整数倍, 写到最后的时候就会有上次读取
 到 bytes 的内容写入实测 , 直接 write(bytes) 就可以在中间不乱码, 但是这样
 结尾会多几个乱码字节, 把 byte[12] 改成 byte[1] 就可以解决了. 因为原文本的字节数
 不一定是 12 的整数倍, 写到最后的时候就会有上次读取到 bytes 的内容写入实测 , 直接
  write(bytes) 就可以在中间不乱码, 但是这样结尾会多几个乱码字节, 把 byte[12] 改成 byt
  e[1] 就可以解决了. 因为原文本的字节数不一定是 12 的整数倍, 写到最后的时候就会有上次读取
  到 bytes 的内容写入读取一个文本文件的内容,然后复制到另一个文件里,实现文件复制这样的一个需求。
  但是,在实际操作的时候,发现复制后的文件的